import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.util.Random;public class Board extends JPanel implements ActionListener {    private final int DOT_SIZE = 20;    private final int ALL_DOTS = 1600;    private Image dot, apple;    private int appleX, appleY;    private final int[] snakePositionX = new int[ALL_DOTS];    private final int[] snakePositionY = new int[ALL_DOTS];    private int snakeSize;    private boolean right = true, left, up, down;    private boolean inGame = true;    public Board(){        setBackground(Color.black);        loadImages();        initGame();        addKeyListener(new FieldKeyListener());        setFocusable(true);    }    public void initGame(){        snakeSize = 3;        for (int i = 0; i < snakeSize; i++) {            snakePositionX[i] = 60 - i * DOT_SIZE;            snakePositionY[i] = 60;        }        Timer timer = new Timer(100, this);        timer.start();        createApple();    }    public void createApple(){        appleX = new Random().nextInt(39) * DOT_SIZE;        appleY = new Random().nextInt(39) * DOT_SIZE;    }    public void loadImages(){        ImageIcon iia = new ImageIcon("src/resources/apple.png");        apple = iia.getImage();        ImageIcon iid = new ImageIcon("src/resources/dot.png");        dot = iid.getImage();    }    @Override    protected void paintComponent(Graphics g) {        super.paintComponent(g);        if(inGame){            g.drawImage(apple,appleX,appleY,this);            for (int i = 0; i < snakeSize; i++) {                g.drawImage(dot, snakePositionX[i], snakePositionY[i],this);            }        } else{            String gameOver = "Game Over";            String score = "Your score: " + snakeSize;            //Font f = new Font("Arial",14,Font.BOLD);            g.setColor(Color.white);            // g.setFont(f);            g.drawString(gameOver,400, 400);            g.drawString(score,400, 420);        }    }    public void move(){        for (int i = snakeSize; i > 0; i--) {            snakePositionX[i] = snakePositionX[i - 1];            snakePositionY[i] = snakePositionY[i - 1];        }        if(left)    { snakePositionX[0] -= DOT_SIZE; }        if(right)   { snakePositionX[0] += DOT_SIZE; }        if(up)      { snakePositionY[0] -= DOT_SIZE; }        if(down)    { snakePositionY[0] += DOT_SIZE; }    }    public void checkApple(){        if(snakePositionX[0] == appleX && snakePositionY[0] == appleY){            snakeSize++;            createApple();        }    }    public void checkCrash(){        for (int i = snakeSize; i > 0 ; i--) {            if (i > 4 && snakePositionX[0] == snakePositionX[i] &&                    snakePositionY[0] == snakePositionY[i])            { inGame = false; }        }        int SIZE = 800;        if(snakePositionX[0] > SIZE || snakePositionX[0] < 0 ||                snakePositionY[0] < 0 || snakePositionY[0] > SIZE)        { inGame = false; }    }    @Override    public void actionPerformed(ActionEvent e) {        if(inGame){            checkApple();            checkCrash();            move();        }        repaint();    }    class FieldKeyListener extends KeyAdapter{        @Override        public void keyPressed(KeyEvent e) {            super.keyPressed(e);            int key = e.getKeyCode();            if(key == KeyEvent.VK_LEFT && !right){                left = true;                up = false;                down = false;            }            if(key == KeyEvent.VK_RIGHT && !left){                right = true;                up = false;                down = false;            }            if(key == KeyEvent.VK_UP && !down){                right = false;                up = true;                left = false;            }            if(key == KeyEvent.VK_DOWN && !up){                right = false;                down = true;                left = false;            }        }    }}